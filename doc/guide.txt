CxxTest User Guide
==================
:doctype: article

:numbered!:
[abstract]
Abstract
--------
CxxTest is a unit testing framework for C\++ that is similar in
spirit to http://junit.org/[JUnit],
http://cppunit.sourceforge.net[CppUnit], and
http://xprogramming.com/software.html[xUnit].  CxxTest is easy to
use because it does not require precompiling a CxxTest testing
library, it employs no advanced features of C++ (e.g. RTTI) and it
supports a very flexible form of test discovery.  This documentation
describes CxxTest 4.0, which includes significant enhancements to
the test discovery process, a modern test driver, and new documentation.

:numbered:

Overview
--------

CxxTest is a unit testing framework for C++ that is similar in
spirit to http://junit.org/[JUnit],
http://cppunit.sourceforge.net[CppUnit], and
http://xprogramming.com/software.html[xUnit].  
CxxTest is designed to be as portable as possible;  it does not require

 - RTTI
 - Member template functions
 - Exception handling
 - External libraries (including memory management, file/console I/O, graphics libraries)

However, CxxTest can also leverage advanced features when
they are supported by a compiler (e.g. catch unhandled exceptions).

Additionally, CxxTest supports _test discovery_.  Tests are defined in 
C\++ header files, which are parsed by CxxTest to automatically generate a test runner.
Thus, CxxTest is somewhat easier to use than alternative
C\++ testing frameworks, since you do not need to _register_ tests.

CxxTest is available under the http://www.gnu.org/copyleft/lesser.html[GNU
Lesser General Public]. The homepage for CxxTest is
http://cxxtest.tigris.org.  The following are key resources for
CxxTest:

 Release downloads::
     http://cxxtest.tigris.org/servlets/ProjectDocumentList
 HTML user guide::
     http://cxxtest.tigris.org/guide.html
 PDF user guide::
     http://cxxtest.tigris.org/guide.pdf

The remainder of the CxxTest User Guide provides the following documentation:

 - <<gettingStarted,Getting Started>>: Some simple examples that illustrate how to use CxxTest
 - <<xUnit,xUnit Testing Paradigm>>: A discussion of how CxxTest structures testing
 - <<testAssertions,Test Assertions>>: The test assertions supported by CxxTest
 - <<cxxtestgen,The CxxTestGen Command>>: Documentation for the +cxxtestgen+ command
 - <<samples,Sample Problems>>: Examples that illustrate features of CxxTest
 - <<installation,Installation>>: How to install CxxTest
 - <<discussion,Discussion>>: Comments on the past, present and future of CxxTest


[[gettingStarted]]
Getting Started
---------------

Tests are organized into _test suites_, and test suites are written
in header files.  A test suite is a class that inherits from
+CxxTest::TestSuite+.  A test is a public member function of that
class whose name starts with +test+, e.g. +testDirectoryScanner()+,
+test_cool_feature()+ and +TestImportantBugFix()+.

A First Example
~~~~~~~~~~~~~~~

The following is a simple example of a
test suite with a single test, +testAddition+, which perform two test assertions:
[source,cplusplus]
----
include::examples/MyTestSuite.h[]
----

You use the +cxxtestgen+ script to generate a _test runner_ for test suites in C\++ header files:
[source,bash]
----
include::examples/buildRunner_main.sh[]
----
This command generates the file +runner.cpp+, which can be compiled.
[source,bash]
----
include::examples/buildRunner_main.sh[]
----
Note that additional compiler flags may be needed to include headers
and libraries that are used during testing.


This runner can be executed to perform the specified tests:
[source,bash]
----
include::examples/exeRunner_main.sh[]
----
which generates the following output:
[verbatim]
----
include::examples/exeRunner.out[]
----


A Second Example
~~~~~~~~~~~~~~~~

The following header file extends the previous example to
include a test that generates an error:
[source,cplusplus]
----
include::examples/MyTestSuite2.h[]
----

The test runner generated by +cxxtestgen+ for this test suite generates the following output:
[verbatim]
----
include::examples/exeRunner2.out[]
----



[[xUnit]]
xUnit Testing Paradigm
----------------------

The CxxTest supports test automation, sharing of setup
and shutdown code for tests, aggregation of tests into collections,
and independence of the tests from the reporting framework.  To
achieve this, CxxTest supports some important concepts that are common to xUnit frameworks (
e.g. http://junit.org/[JUnit], http://cppunit.sourceforge.net[CppUnit], and
http://xprogramming.com/software.html[xUnit]):

test fixture::
   A 'test fixture' represents the preparation needed to perform one or more
   tests, and any associate cleanup actions.  This may involve, for example,
   creating temporary or proxy databases, directories, or starting a server
   process.

/////
test case::
   A 'test case' is the smallest unit of testing.  It checks for a specific
   response to a particular set of inputs.  CxxTest provides a base class,
   +TestCase+, which may be used to create new test cases.
/////

test suite::
   A 'test suite' is a collection of test cases, which represent the smallest unit of
   testing.  The +TestSuite+ class is used to aggregate tests that should be executed together.

test runner::
   A 'test runner' is a component which orchestrates the execution of tests
   and provides the outcome to the user.

When building test fixtures using +TestSuite+, the +TestSuite.setUp+
and +TestSuite.tearDown+ methods can be overridden to provide
initialization and cleanup for the fixture.  The +TestSuite.setUp+
method is run before each test is executed, and the +TestSuite.tearDown+
method is run after each test is executed.



[[testAssertions]]
Test Assertions
---------------

The following table summarizes the test assertions supported by CxxTest:

[options="header"]
|====================================================================================
| Macro                                                                 | Description
| <<ts_assert,+TS_ASSERT(_expr_)+>>                                   | Verify +_expr_+ is true
| xref:ts_assert_delta[+TS_ASSERT_DELTA(x,y,d)+]                        | Verify that +abs(x-y) < d+
| xref:ts_assert_differs[+TS_ASSERT_DIFFERS(x,y)+]                      | Verify that +_x != y_+
| xref:ts_assert_equals[+TS_ASSERT_EQUALS(x,y)+]                        | Verify that +_x == y_+
| xref:ts_assert_less_than[+TS_ASSERT_LESS_THAN(x,y)+]                  | Verify that +_x < y_+
| xref:ts_assert_less_than_equals[+TS_ASSERT_LESS_THAN_EQUALS(x,y)+]    | Verify that +_x <= y_+
| xref:ts_assert_predicate[+TS_ASSERT_PREDICATE(P,x)+]                  | Verify +_P(x)_+
| xref:ts_assert_relation[+TS_ASSERT_RELATION(x,R,y)+]                  | Verify +_x R y_+
| xref:ts_assert_same_data[+TS_ASSERT_SAME_DATA(x,y,size)+]             | Verify two buffers are equal
| xref:ts_assert_throws[+TS_ASSERT_THROWS(expr,type)+]                  | Verify that +_expr_+ throws the specified exception type
| <<ts_assert_throws_anything,+TS_ASSERT_THROWS_ANYTHING(expr)+>>     | Verify that +_expr_+ throws an exception
| xref:ts_assert_throws_assert[+TS_ASSERT_THROWS_ASSERT(expr,arg,assertion)+] | Verify type and value of what +_expr_+ throws
| xref:ts_assert_throws_equals[+TS_ASSERT_THROWS_EQUALS(expr,arg,x,y)+] | Verify type and value of what +_expr_+ throws
| <<ts_assert_throws_nothing,+TS_ASSERT_THROWS_NOTHING(expr)+>>       | Verify that +_expr_+ doesn't throw anything
| <<ts_fail,+TS_FAIL(_message_)+>>                                   | Fail unconditionally
| <<ts_trace,+TS_TRACE(_message_)+>>                                 | Print +_message_+ as an informational message
| <<ts_warn,+TS_WARN(_message_)+>>                                    | Print +_message_+ as a warning
|====================================================================================

<<appendix_A,Appendix A>> provides examples that illustrate the use of these test assertions


[[cxxtestgen]]
The CxxTestGen Command
----------------------

[[samples]]
Sample Problems
---------------

[[installation]]
Installation
------------

[[discussion]]
Final Thoughts
--------------

The CxxTest 4.0 release reflects major changes in the management
and focus of CxxTest.  The 4.0 release is the first release of
CxxTest in over seven years, and virtually all of the initial
developers have moved on to other projects.  CxxTest is heavily
used at Sandia National Laboratories, and Sandia's ongoing use of
CxxTest is a major driver for the 4.0 release.  Similarly, major
changes in CxxTest reflect the focus of the developer team:

 - Perl is no longer used to support CxxTest scripts.  Python is now the only scripting language used by CxxTest.
 - The testing scripts have been rewritten using the PyUnit framework.
 - Installation process for CxxTest now leverages and integrates with the system Python installation.
 - A more comprehensive C++ parser is now available, which supports testing of templates.
 - The CxxTest GUI is no longer supported.  (TODO: verify this step.)
 - CxxTest runners now have a command-line interface that facilitates interative use of the test runner.
 - A new user guide is now available in PDF, HTML and Ebook formats.

Additionally, CxxTest is now validated with continuous integration
tests.  Yes, the CxxTest developers eat their own dog food!


Macros vs templates...

GUI Support

Embedded systems

The <<ts_trace,TS_TRACE>> and <<ts_warn,TS_WARN>> commands have similar functionality.  However, they differ in that the <<ts_warn,TS_WARN>> command changes the behavior of CxxTest with a GUI runner.


:numbered!:

[appendix]
[[appendix_A]] 
Test Assertion Examples
-----------------------

[[ts_assert]] TS_ASSERT::
This is the most basic test assertion, which simply verifies that the +_expr_+ argument is true:
[source,cplusplus]
----
include::examples/Assertions_assert.h[]
----
[[ts_assert_delta]] TS_ASSERT_DELTA::
This test assertion verifies two floating point values are within a specified absolute difference:
[source,cplusplus]
----
include::examples/Assertions_assertDelta.h[]
----

[[ts_assert_differs]] TS_ASSERT_DIFFERS::
This test assertion verifies that the two arguments are not equal:
[source,cplusplus]
----
include::examples/Assertions_assertDiffers.h[]
----

[[ts_assert_equals]] TS_ASSERT_EQUALS::
  This test assertion verifies that the two arguments are equal:
[source,cplusplus]
----
include::examples/Assertions_assertEquals.h[]
----
Note that this test is performed using the C++ +_==_+ operator, whose behavior may be redefined for the two argument types.

[[ts_assert_less_than]] TS_ASSERT_LESS_THAN::
This test assertion verifies that the first argument is strictly less than the second argument:
[source,cplusplus]
----
include::examples/Assertions_assertLessThan.h[]
----

[[ts_assert_less_than_equals]] TS_ASSERT_LESS_THAN_EQUALS::
This test assertion verifies that the first argument is less than or equal to the second argument:
[source,cplusplus]
----
include::examples/Assertions_assertLessThanEquals.h[]
----

[[ts_assert_predicate]] TS_ASSERT_PREDICATE::
This test assertion takes as an argument the name of a class, similar to a STL +_unary_function_+, and evaluates the +_operator()_+ method:
[source,cplusplus]
----
include::examples/Assertions_assertPredicate.h[]
----
This test assertion can be seen as a generalization of <<ts_assert,TS_ASSERT>>, but it 
allows the tester to see the failed value. 

[[ts_assert_relation]] TS_ASSERT_RELATION::
It takes as an argument the name of a class, similar to a STL +_binary_function_+, and evaluates the +_operator()_+ method:
[source,cplusplus]
----
include::examples/Assertions_assertRelation.h[]
----
This test assertion can be seen as a generalization of <<ts_assert_equals,TS_ASSERT_EQUALS>>, <<ts_assert_differs>>, <<ts_assert_less_than,TS_ASSERT_LESS_THAN>> and <<ts_assert_less_than_equals>>. 
This can be used to assert comparisons which are not covered by the builtin test assertions. 

[[ts_assert_same_data]] TS_ASSERT_SAME_DATA::
This test assertion is similar to <<ts_assert_equals,TS_ASSERT_EQUALS>>,
except that it compares the contents of two buffers in memory:
[source,cplusplus]
----
include::examples/Assertions_assertSameData.h[]
----
The standard runner dumps the contents of both buffers as hex values when this test fails.

[[ts_assert_throws]] TS_ASSERT_THROWS::
This test assertion verifies that the specified exception is thrown when the first argument is executed:
[source,cplusplus]
----
include::examples/Assertions_assertThrows.h[]
----

[[ts_assert_throws_anything]] TS_ASSERT_THROWS_ANYTHING::
This test assertion verifies that _some_ exception is thrown when the first argument is executed:
[source,cplusplus]
----
include::examples/Assertions_assertThrowsAnything.h[]
----

[[ts_assert_throws_assert]] TS_ASSERT_THROWS_ASSERT::
This test assertion verifies that an exception is thrown when executing the first argument.  The second argument specifies a variable declaration for the exception, and the third argument is executed to test that 
exception value:
[source,cplusplus]
----
include::examples/Assertions_assertThrowsAssert.h[]
----
Note that this can be viewed as a generalization of <<ts_assert_throws_equals,TS_ASSERT_THROWS_EQUALS>>.

[[ts_assert_throws_equals]] TS_ASSERT_THROWS_EQUALS::
This test assertion verifies that an exception is thrown when executing the first argument.  The second argument specifies a variable declaration for the exception, and the third and fourth arguments are values that are asserted equal after the exception is thrown:
[source,cplusplus]
----
include::examples/Assertions_assertThrowsEquals.h[]
----

[[ts_assert_throws_nothing]] TS_ASSERT_THROWS_NOTHING::
This test assertion verifies that an exception is _not_ thrown when executing the first argument:
[source,cplusplus]
----
include::examples/Assertions_assertThrowsNothing.h[]
----

[[ts_fail]] TS_FAIL::
This command triggers a test failure with an associated message:
[source,cplusplus]
----
include::examples/Assertions_fail.h[]
----

[[ts_trace]] TS_TRACE::
This command prints an informational message:
[source,cplusplus]
----
include::examples/Assertions_trace.h[]
----

[[ts_warn]] TS_WARN::
This command prints a message as a warning:
[source,cplusplus]
----
include::examples/Assertions_warn.h[]
----

// vim: set syntax=asciidoc:

